# Copyright (c) 2021-2022, NVIDIA CORPORATION. All rights reserved.
# See file LICENSE for terms.

from typing import Tuple

def memory_register(buf) -> None: ...
def memory_deregister(buf) -> None: ...

class CuFile:
    def __init__(self, file_path, flags="r") -> None: ...
    def close(self) -> None: ...
    @property
    def closed(self) -> bool: ...
    def fileno(self) -> int: ...
    def open_flags(self) -> int: ...
    def read(self, buf, size: int = None, file_offset: int = 0) -> int: ...
    def write(self, buf, size: int = None, file_offset: int = 0) -> int: ...

class DriverProperties:
    @property
    def is_gds_availabe(self) -> bool: ...
    @property
    def major_version(self) -> bool: ...
    @property
    def minor_version(self) -> bool: ...
    @property
    def allow_compat_mode(self) -> bool: ...
    @property
    def poll_mode(self) -> bool: ...
    @poll_mode.setter
    def poll_mode(self, enable: bool) -> None: ...
    @property
    def poll_thresh_size(self) -> int: ...
    @poll_thresh_size.setter
    def poll_thresh_size(self, size_in_kb: int) -> None: ...
    @property
    def max_device_cache_size(self) -> int: ...
    @max_device_cache_size.setter
    def max_device_cache_size(self, size_in_kb: int) -> None: ...
    @property
    def per_buffer_cache_size(self) -> int: ...
    @property
    def max_pinned_memory_size(self) -> int: ...
    @max_pinned_memory_size.setter
    def max_pinned_memory_size(self, size_in_kb: int) -> None: ...

class NVML:
    def get_name(self) -> str: ...
    def get_memory(self) -> Tuple[int, int]: ...
    def get_bar1_memory(self) -> Tuple[int, int]: ...
